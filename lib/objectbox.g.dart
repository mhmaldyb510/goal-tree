// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'core/models/goal_model.dart';
import 'core/models/node_model.dart';
import 'core/models/resource_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 5093180647650046119),
    name: 'GoalModel',
    lastPropertyId: const obx_int.IdUid(8, 2177050151561794612),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8069320622820961822),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6830341031295841537),
        name: 'goalId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3089020214409824720),
        name: 'title',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 9159793378990127557),
        name: 'description',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 4308777772146820496),
        name: 'progress',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 416086853064638856),
        name: 'deadline',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 6183174910837128640),
        name: 'notes',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 2177050151561794612),
        name: 'priority',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(1, 2190179487637477566),
        name: 'resources',
        targetId: const obx_int.IdUid(3, 4444198091394292329),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(2, 7603592947972533882),
        name: 'nodes',
        targetId: const obx_int.IdUid(2, 5082454611034125224),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 5082454611034125224),
    name: 'NodeModel',
    lastPropertyId: const obx_int.IdUid(4, 8759639307600957228),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 1941339341058951116),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7552334543662649593),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2621560950957790327),
        name: 'isDone',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 8759639307600957228),
        name: 'parentId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(1, 5030721023964562914),
        relationTarget: 'NodeModel',
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(3, 1049634696482291799),
        name: 'children',
        targetId: const obx_int.IdUid(2, 5082454611034125224),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 4444198091394292329),
    name: 'ResourceModel',
    lastPropertyId: const obx_int.IdUid(3, 4237224829998505364),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3167336564158359303),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1535708313946407139),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4237224829998505364),
        name: 'link',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(3, 4444198091394292329),
    lastIndexId: const obx_int.IdUid(1, 5030721023964562914),
    lastRelationId: const obx_int.IdUid(3, 1049634696482291799),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    GoalModel: obx_int.EntityDefinition<GoalModel>(
      model: _entities[0],
      toOneRelations: (GoalModel object) => [],
      toManyRelations: (GoalModel object) => {
        obx_int.RelInfo<GoalModel>.toMany(1, object.id): object.resources,
        obx_int.RelInfo<GoalModel>.toMany(2, object.id): object.nodes,
      },
      getId: (GoalModel object) => object.id,
      setId: (GoalModel object, int id) {
        object.id = id;
      },
      objectToFB: (GoalModel object, fb.Builder fbb) {
        final goalIdOffset = fbb.writeString(object.goalId);
        final titleOffset = fbb.writeString(object.title);
        final descriptionOffset = fbb.writeString(object.description);
        final notesOffset = fbb.writeString(object.notes);
        fbb.startTable(9);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, goalIdOffset);
        fbb.addOffset(2, titleOffset);
        fbb.addOffset(3, descriptionOffset);
        fbb.addFloat64(4, object.progress);
        fbb.addInt64(5, object.deadline?.millisecondsSinceEpoch);
        fbb.addOffset(6, notesOffset);
        fbb.addInt64(7, object.priority);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final deadlineValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          14,
        );
        final goalIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final titleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final descriptionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final progressParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        final deadlineParam = deadlineValue == null
            ? null
            : DateTime.fromMillisecondsSinceEpoch(deadlineValue);
        final notesParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 16, '');
        final priorityParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          18,
          0,
        );
        final object = GoalModel(
          goalId: goalIdParam,
          title: titleParam,
          description: descriptionParam,
          progress: progressParam,
          deadline: deadlineParam,
          notes: notesParam,
          priority: priorityParam,
        )..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        obx_int.InternalToManyAccess.setRelInfo<GoalModel>(
          object.resources,
          store,
          obx_int.RelInfo<GoalModel>.toMany(1, object.id),
        );
        obx_int.InternalToManyAccess.setRelInfo<GoalModel>(
          object.nodes,
          store,
          obx_int.RelInfo<GoalModel>.toMany(2, object.id),
        );
        return object;
      },
    ),
    NodeModel: obx_int.EntityDefinition<NodeModel>(
      model: _entities[1],
      toOneRelations: (NodeModel object) => [object.parent],
      toManyRelations: (NodeModel object) => {
        obx_int.RelInfo<NodeModel>.toMany(3, object.id): object.children,
      },
      getId: (NodeModel object) => object.id,
      setId: (NodeModel object, int id) {
        object.id = id;
      },
      objectToFB: (NodeModel object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addBool(2, object.isDone);
        fbb.addInt64(3, object.parent.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final isDoneParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          8,
          false,
        );
        final object = NodeModel(name: nameParam, isDone: isDoneParam)
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.parent.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        object.parent.attach(store);
        obx_int.InternalToManyAccess.setRelInfo<NodeModel>(
          object.children,
          store,
          obx_int.RelInfo<NodeModel>.toMany(3, object.id),
        );
        return object;
      },
    ),
    ResourceModel: obx_int.EntityDefinition<ResourceModel>(
      model: _entities[2],
      toOneRelations: (ResourceModel object) => [],
      toManyRelations: (ResourceModel object) => {},
      getId: (ResourceModel object) => object.id,
      setId: (ResourceModel object, int id) {
        object.id = id;
      },
      objectToFB: (ResourceModel object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final linkOffset = fbb.writeString(object.link);
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, linkOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final linkParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final object = ResourceModel(name: nameParam, link: linkParam)
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [GoalModel] entity fields to define ObjectBox queries.
class GoalModel_ {
  /// See [GoalModel.id].
  static final id = obx.QueryIntegerProperty<GoalModel>(
    _entities[0].properties[0],
  );

  /// See [GoalModel.goalId].
  static final goalId = obx.QueryStringProperty<GoalModel>(
    _entities[0].properties[1],
  );

  /// See [GoalModel.title].
  static final title = obx.QueryStringProperty<GoalModel>(
    _entities[0].properties[2],
  );

  /// See [GoalModel.description].
  static final description = obx.QueryStringProperty<GoalModel>(
    _entities[0].properties[3],
  );

  /// See [GoalModel.progress].
  static final progress = obx.QueryDoubleProperty<GoalModel>(
    _entities[0].properties[4],
  );

  /// See [GoalModel.deadline].
  static final deadline = obx.QueryDateProperty<GoalModel>(
    _entities[0].properties[5],
  );

  /// See [GoalModel.notes].
  static final notes = obx.QueryStringProperty<GoalModel>(
    _entities[0].properties[6],
  );

  /// See [GoalModel.priority].
  static final priority = obx.QueryIntegerProperty<GoalModel>(
    _entities[0].properties[7],
  );

  /// see [GoalModel.resources]
  static final resources = obx.QueryRelationToMany<GoalModel, ResourceModel>(
    _entities[0].relations[0],
  );

  /// see [GoalModel.nodes]
  static final nodes = obx.QueryRelationToMany<GoalModel, NodeModel>(
    _entities[0].relations[1],
  );
}

/// [NodeModel] entity fields to define ObjectBox queries.
class NodeModel_ {
  /// See [NodeModel.id].
  static final id = obx.QueryIntegerProperty<NodeModel>(
    _entities[1].properties[0],
  );

  /// See [NodeModel.name].
  static final name = obx.QueryStringProperty<NodeModel>(
    _entities[1].properties[1],
  );

  /// See [NodeModel.isDone].
  static final isDone = obx.QueryBooleanProperty<NodeModel>(
    _entities[1].properties[2],
  );

  /// See [NodeModel.parent].
  static final parent = obx.QueryRelationToOne<NodeModel, NodeModel>(
    _entities[1].properties[3],
  );

  /// see [NodeModel.children]
  static final children = obx.QueryRelationToMany<NodeModel, NodeModel>(
    _entities[1].relations[0],
  );
}

/// [ResourceModel] entity fields to define ObjectBox queries.
class ResourceModel_ {
  /// See [ResourceModel.id].
  static final id = obx.QueryIntegerProperty<ResourceModel>(
    _entities[2].properties[0],
  );

  /// See [ResourceModel.name].
  static final name = obx.QueryStringProperty<ResourceModel>(
    _entities[2].properties[1],
  );

  /// See [ResourceModel.link].
  static final link = obx.QueryStringProperty<ResourceModel>(
    _entities[2].properties[2],
  );
}
